create database Db_andre

use Db_andre

CREATE TABLE [Aluno]
(Matricula Int NOT NULL Identity(1,1) --Contador automático
,NomeAluno Varchar(100) NOT NULL
,CPF CHAR(11) NOT NULL
,DataNcto SMALLDATETIME NOT NULL
,Mensalidade NUMERIC(6,2) NOT NULL
,Turma char(10) NOT NULL
)
--MANIPULAÇÃO DE DADOS

--Inserção de dados
INSERT ALUNO VALUES ('José da Silva','12345678900','19911121', 1000,'ADS3')
INSERT ALUNO VALUES ('Maria da Silva', '12345678911','20000317',1000, 'ADS1')
INSERT ALUNO VALUES ('Ana da Silva', '12345678922','20000317', 1000,'ADS3')
select * from Aluno

/* CRIAÇÃO DE VARIÁVEIS LOCAIS */
DECLARE @TOTAL INT --NÚMERO DE ALUNOS
DECLARE @VALOR NUMERIC(6,2) --VALOR TOTAL MENSALIDADE
DECLARE @VALOR_TURMA NUMERIC(6,2) --VALOR TOTAL MENSALIDADE POR TURMA
DECLARE @TURMA CHAR(5)
DECLARE @msg varchar(100)

/* DEFINE O VALOR DE CADA VARIÁVEL */
SET @TURMA = 'ADS3'
SET @TOTAL = (SELECT COUNT(*) FROM Aluno)
SET @VALOR = (SELECT SUM(MENSALIDADE) FROM Aluno)
SET @VALOR_TURMA = (SELECT SUM(MENSALIDADE) FROM Aluno WHERE TURMA=@TURMA)

/* IMPRIMINDO O VALOR DAS VARIÁVEIS */
PRINT(@TOTAL)
PRINT('TOTAL de Alunos ' + CONVERT(CHAR(10),@TOTAL))
PRINT('')
PRINT('MENSALIDADE TURMA ' + @TURMA)
PRINT('VALOR R$ ' + CONVERT(CHAR(10),@VALOR_TURMA))

/* VERIFICAÇÃO DO VALOR DA MENSALIDADE */
PRINT('')
PRINT('IF - DECISÃO')
IF @VALOR > 1000
BEGIN
SET @msg = 'Valor Total das Mensalidades maior que 1000' –Mostrar o valor
PRINT(@msg)
END
ELSE
BEGIN
SET @msg = 'Valor Total das Mensalidades menor que 1000' –Mostrar o valor
PRINT(@msg)
END
PRINT('')
PRINT('WHILE - REPETIÇÃO')
WHILE @VALOR > 1000
BEGIN
PRINT(@VALOR) ---Descrever/mostrar melhor
SET @VALOR=@VALOR-500
---Descrever/mostrar melhor depois de atualizado p valor
END

--1) Desenvolva um script em SQL que mostre um contador até 100 e pare no número 62
--mostrando o número como resultado;

declare @contador as int
set @contador = 1
while @contador <= 100
begin
select @contador
if @contador <= 61
begin 
set @contador = @contador + 1
continue
end
break
end

--2) Crie um script em P/SQL que mostre os número de 1 até 100 e mostre se o número é
--par ou impar.

declare @principal as int
set @principal = 1
while @principal <= 100
begin
select @principal,
case 
when @principal % 2 = 0 then 'par'
else 'impar'
end 
set @principal = @principal + 1
end

--3)Desenvolve um script em PL/SQL que apresente o resultado da variável idade se:

--  Condição      |   Resultado
--                |
--  Menor que 10  |   Criança
--  De 10 até 17  |   Jovem
--  De 18 até 60  |   Adulto
--  Acima de  61  |   Idoso

declare @idade as int
set @idade = 40
select @idade,
case
when @idade < 10 then 'Criança'
when @idade >= 10 and @idade <= 17 then 'Jovem'
when @idade >= 18 and @idade <= 60 then 'Adulto'
else 'Idoso'
end as resultado

--4) Mostrar se o aluno mario da silva está cadastrado na tabela e calcular aumento na
--mensalidade de 10% e apresentar como jovem se idade menor que 60 senão idoso

declare @idade as int
declare @nome as varchar (100)
declare @mensa numeric (12,2)
set @nome = 'Mario da Silva'
set @mensa = (select mensalidade from Aluno	where nome=@nome)
set @idade = (select year (getdate()) - year (DataNcto) from Aluno where nome = @nome
set @mensa * 1.1 --recebe aumento de 10%
select @mensa --mostra valor da mensalidade
if @idade < 60
begin
print 'Jovem'
end
begin
select 'Idoso'
end

--5) Elabore um script em SQL que apresente um contador até 1000 e mostre a soma dos
--números multiplicados por 3 e multiplicados por 5 e no final mostrar a soma de cada um deles; 

declare @contador as int
set @contador = 1
while @contador =< 1000
begin
select @contador 




--6) Mostrar em PL/SQL se o aluno Mário da silva está contido em uma variável, bem como seu
--salário e calcular aumento de 10% para ele e mostre o nome em letras maiúsculas.

INSERT ALUNO VALUES ('José da Silva','12345678900','19911121', 1000,'ADS3')
INSERT ALUNO VALUES ('Maria da Silva', '12345678911','20000317',1000, 'ADS1')
INSERT ALUNO VALUES ('Ana da Silva', '12345678922','20000317', 1000,'ADS3')

declare @nome varchar(100)
declare @salario numeric(10,2)
declare @nomeAluno varchar(100)
set @nome = 'Maria da Silva'
set @salario = 3000
set @nomeAluno = (select nomeAluno from Aluno where @nome = @nomeAluno)
select @nomeAluno

if @nomeAluno = @nome
begin
select 'Aluno contido' + @nome
select 'Salario com 10%'+ convert(char(10), @salario*1,1)
select 'Aluno '+ upper(@nome)
end

--7) Elabore um laço de repetição usando PL/SQL que use While e quando o valor for 8 pare e
--finalize o programa;

declare @valor as int 
set @valor = 1
while @valor <= 10
begin
select @valor
if @valor <= 7
begin 
set @valor = @valor + 1
continue
end
break
end

--8) Desenvolva um script em PL/SQL que use duas variáveis e verifique se a media for acima de
--6 o aluno está aprovado senão reprovado;

declare @nota1 numeric (12,2)
declare @nota2 numeric (12,2)
set @nota1 = 5
set @nota2 = 5
select @nota1 + @nota2,
case
when @nota1 + @nota2 >= 12 then 'aprovado'
else 'reprovado'
end


--9) Elabore um script em PL/SQL que verifique os números de 1 até 100 e mostre a quantidade
--de pares e impares no final, bem como a soma de todos os pares e também a soma dos
--impares.

declare @contador as int
DECLARE @somapar as int
declare @qtdepar as int
declare @somaimpar as int
declare @qtdeimpar as int

set @contador = 1
set @somapar = 0
set @qtdepar = 0
set @somaimpar = 0
set @qtdeimpar = 0

while @contador <= 100
begin
if @contador % 2= 0
begin
set @somapar = @somapar + @contador
set @qtdepar = @qtdepar + 1
end
else
begin
set @somaimpar = @somaimpar + @contador
set @qtdeimpar = @qtdeimpar + 1
end
set @contador = @contador + 1
end
select 'qtde de par '+ convert(char())

(INCOMPLETO)


--10) Crie um script em PL/SQL usando CASE que mostre um laço de repetição de 1 até 5000 e
--apresente a seguinte mensagem:
--Se número entre 1000 e 2000 analista júnior
--Se número entre 2500 e 4000 analista pleno
--Senão analista sênior

declare @salario as int
set @salario = 1
while @salario <= 5000
begin
select @salario,
case
when @salario >= 1000 and @salario <= 2000 then 'Analista Junior'
when @salario > 2500 and @salario < 4000 then 'Analista pleno'
else 'Analista Senior'
end as resultado
set @salario = @salario +1
end



-------------STORED PROCEDURED-------------



create table ALUNO
(matricula int primary key,
 nome varchar(100),
 turma varchar(100),
 mensalidade numeric(7,2),
 nota1 numeric(3,1),
 nota2 numeric(3,1),
 municipio varchar(100))

insert aluno values(1,'José','3a',1500, 8,9, 'Curitiba')
insert aluno values(2,'Maira','3B',500, 2,9, 'São José dos Pinhais')
insert aluno values(3,'Pedro','3a',2500, 6,5, 'Curitiba')
insert aluno values(4,'Tereza','3B',500, 9,9, 'São José dos Pinhais')
insert aluno values(5,'Marli','3a',3500, 4,2, 'Curitiba')
insert aluno values(6,'Roberto','3B',750, 8,9, 'Curitiba')
insert aluno values(7,'Carlos','3a',100, 7,5, 'São José dos Pinhais')
insert aluno values(8,'Maria','3B',2500, 10,8, 'Curitiba')
insert aluno values(9,'Francisco','3a',3500, 4,3, 'Curitiba')
insert aluno values(10,'Marialva','3B',4500, 8,9, 'São José dos Pinhais')

--1. Crie uma stored procedure que selecione os alunos do município de Curitiba.

create procedure sp_alunos_Curitiba
as
select * from aluno where municipio = 'Curitiba'


exec sp_alunos_Curitiba

--2. Crie uma stored procedure que selecione o número de alunos do município
--de São José dos Pinhais com média maior ou igual a 7.

create procedure sp_numerDeAlunos_SaoJose
as 
declare @media as int
select @media = 
select * from aluno where municipio = 'São José dos Pinhais'



--3. Crie uma stored procedure que some o valor das mensalidades por
--município passando o nome do município por parâmetro.

create procedure sp_mensaAluno
@municipio varchar(50)
as 
select sum(Mensalidade) from aluno where municipio = @Municipio

exec sp_mensaAluno 'São José dos Pinhais'

--4. Crie uma stored procedure que calcule a média de um aluno, passando a
--matricula do mesmo como parâmetro e informe se o mesmo está aprovado
--para média maior igual a sete, reprovado para média menor que quatro e em
--recuperação para médias maiores ou igual a quatro e menores que sete.

create procedure sp_mediaAluno @matricula int
as

/* DECLARAÇÕES DE VARÍAVEIS LOCAIS */
declare @media numeric(3,1)

/* DEFINE O VALOR DAS VARIAVEIS  */
set @media = (select(nota1+nota2)/2 from aluno where matricula = @matricula)

/* VERIFICAÇÃO DO VALOR DA VARIAVEL */
if @media >= 7
begin
select 'APROVADO' + convert(char(5),@media)
end 
else if @media < 4
begin 
select 'REPROVADO' + convert(char(5),@media)
end
else
print 'RECUPERAÇÃO' + convert(char(5),@media)

exec sp_mediaAluno 5

--5. Crie uma stored procedure que mostre o nome e a média de todos alunos do
--município de Curitiba. 


create procedure sp_alunoMedia
as
select nome,(nota1+nota2)/2 as media
from aluno where municipio = 'CURITIBA'

exec sp_alunoMedia

-----------Resolução dos Exercícios Stored Procedure 240322--------------

--1

create table FUNCIONARIO
( MATRICULA int not null primary key,
 NOME varchar(30),
 SALARIO numeric(12,2),
 DEPARTAMENTO varchar(40),
 CARGO varchar(40)
)
create procedure insert_funcionario
@matricula int, @nome varchar(40), @salario numeric(12,2), @departamento varchar(40), @cargo varchar(40)
as
 insert into FUNCIONARIO values (@matricula, @nome, @salario, @departamento, @cargo)

 --execução

 exec insert_funcionario @matricula = 13704790, @nome = 'Colin', @salario = 3500, @departamento = 'TI', @cargo = 'GERENTE'
 select * from FUNCIONARIO

 --2

 create procedure insert_funcionario_2
 @matricula int, @nome varchar(30), @salario numeric(12,2), @departamento
varchar(40), @cargo
varchar(40)
AS
DECLARE @matricula_cod int
set @matricula_cod = 0
SELECT @matricula_cod = MATRICULA FROM FUNCIONARIO WHERE MATRICULA = @matricula
IF @matricula_cod = 0
BEGIN
INSERT INTO FUNCIONARIO values(@matricula, @nome, @salario, @departamento, @cargo)
END
ELSE
BEGIN
UPDATE FUNCIONARIO
SET NOME = @nome, SALARIO = @salario, DEPARTAMENTO = @departamento, CARGO = @cargo
WHERE MATRICULA = @matricula
END

exec insert_funcionario_2 @matricula = 19550943, @nome = 'Mario da Cruz', @salario =
3900,
@departamento = 'RH', @cargo = 'Recrutador'
select * from funcionario 

 --3

 create procedure insert_bonus_gerente
 @matricula int, @nome varchar(30), @salario numeric(12,2), @departamento
varchar(40), @cargo
varchar(40)
AS
DECLARE @matricula_cod int, @bonus numeric(12,2)
set @matricula_cod = 0 
SELECT @matricula_cod = MATRICULA FROM FUNCIONARIO WHERE MATRICULA = @matricula
IF @cargo = 'GERENTE'
BEGIN
UPDATE FUNCIONARIO
SET SALARIO = SALARIO * 1.1
WHERE MATRICULA = @matricula
END
ELSE IF @cargo <> 'GERENTE'
BEGIN
IF @matricula_cod = 0
 BEGIN
 INSERT INTO FUNCIONARIO values(@matricula, @nome, @salario+@bonus,
@departamento, @cargo)
 END
ELSE
 BEGIN
 UPDATE FUNCIONARIO
 SET NOME = @nome, SALARIO = @salario, DEPARTAMENTO = @departamento,CARGO =
@cargo
 WHERE MATRICULA = @matricula
END
END


 select * from FUNCIONARIO
 exec insert_bonus_gerente @matricula = 75293852, @nome = 'Ana Paula', @salario = 1900, @departamento = 'RH', @cargo = 'Gerente'


 --4
 create table PRODUTO
(
 CODIGO int not null primary key,
 NOME varchar(30),
 QUANTIDADE int,
 VALOR numeric(12,2)
)

create procedure sp_insert_produtos
@codigo int, @nome varchar(40), @quantidade int, @valor numeric(12,2)
as
declare @produto_cod int
set @produto_cod = 0
select @produto_cod = CODIGO from PRODUTO where CODIGO = @codigo 
if @produto_cod = 0
begin
insert into PRODUTO values (@codigo, @nome, @quantidade, @valor)
end
else 
begin
update PRODUTO
set QUANTIDADE = @quantidade
where CODIGO = @codigo
end

--Execução
exec sp_insert_produtos @codigo = 1450, @nome = 'Mamão', @quantidade = 55, @valor = 3.20
select * from PRODUTO


--5

create table NF_PRODUTO
(
QUANTIDADE int,
NF_CODIGO int,
NF_NUMERO int,
CONSTRAINT FK_Codigo FOREIGN KEY (NF_CODIGO) REFERENCES PRODUTO (CODIGO),
CONSTRAINT FK_Numero FOREIGN KEY (NF_NUMERO) REFERENCES NOTA_FISCAL (NUMERO)
)
create table PRODUTO
(
 CODIGO int not null primary key,
 NOME varchar(50),
 QUANTIDADE int,
 VALOR numeric(12,2)
)
create table NOTA_FISCAL
(
 NUMERO int not null primary key,
DATA date
)

create procedure SP_INSERT_NF_PRODUTO
 @quantidade int, @codigo int, @numero int
AS
DECLARE @estoque int, @vendidos int
SELECT @estoque = P.QUANTIDADE,@vendidos = NP.QUANTIDADE FROM PRODUTO P,
NF_PRODUTO NP
WHERE P.CODIGO = @codigo
AND NP.NF_NUMERO = @numero
AND P.CODIGO = NP.NF_CODIGO -- Relacionamento
IF @vendidos < @estoque
BEGIN
PRINT 'Inserção cancelada por que numero de vendas esta menor que estoque'
END
ELSE
BEGIN
INSERT INTO NF_PRODUTO VALUES(@quantidade, @codigo, @numero)
END
SELECT * FROM PRODUTO
SELECT * FROM NF_PRODUTO
SELECT * FROM NOTA_FISCAL
INSERT INTO NOTA_FISCAL VALUES(4545, '20220322')
INSERT INTO NF_PRODUTO VALUES(10, 1450, 4545)


---Execução
exec SP_INSERT_NF_PRODUTO @quantidade = 2, @codigo = 1450, @numero = 4545


--------Exercícios de Stored Procedures 240322-------



--1) Desenvolva uma procedure em PL/SQL que faça a verificação na tabela aluno
--se o mesmo está aprovado (maior igual a 7), recuperação (maior que 4 e menor
--que 7) e reprovado (menor que 4). Crie a tabela com os seguintes campos
--código, nome, nota1, nota2, coddis, mensalidade, qtdefalta.

create table ALUNO
(codigo int primary key,
 nome varchar(100),
 mensalidade numeric(7,2),
 nota1 numeric(3,1),
 nota2 numeric(3,1),
 coddis int,
 qtdefalta int)

 insert into values

 create table disciplina
(codigo int primary key,
 nome varchar(50),
 carga_ho int
 )

 insert into disciplina values (1, 'Matematica', 80)
 insert into disciplina values (2, 'Banco de dados', 80)
 insert into disciplina values (3, 'Programação', 80)

 select * from disciplina

create procedure sp_media
@codigo int
as
declare @media numeric(5,2)

set @media = (select (nota1 + nota2)/2 from aluno where codigo = @codigo)
if @media >= 7
begin
 select 'APROVADO Média = '+ convert(char(5),@media)
end
else if @media < 4
 begin
  select 'Reprovado Média = '+ convert(char(5),@media)
 end

 (continua)


--2 Crie uma procedure em PL/SQL para inserir um aluno na tabela apenas se a
--quantidade de alunos for menor que 10 senão apresentar a quantidade e
--mensagem turma lotada.

create procedure sp_qtde
as
declare @qtde int
set @qtde = (select count(*) from ALUNO)

if @qtde < 10
begin
 insert into aluno values (5,'Salete Aparecida',3,4,2,700,5)
end
else
begin
 select 'Turma Lotada' + + convert(char(5),@qtde)
end


exec sp_qtde
select * from aluno

--3) Faça uma procedure em PL/SQL que apresente a quantidade de alunos
--aprovados, em recuperação e aprovados.

create procedure sp_alunos
as declare @apr int
as declare @rep int
as declare @rec int

set @apr = (select count(*) from aluno where (nota1+nota2)/2 >= 7)
set @rep = (select count(*) from aluno where (nota1+nota2)/2 < 4)
set @apc = (select count(*) from aluno where (nota1+nota2)/2 >= 4   )

if @apr >= 1
begin
 select 'Qtde de Aprovados' + convert(char(5), @rep)
end

if 
begin
 select 'Qtde de Aprovados' + convert(char(5), @rep)
end

(continua)

--4) Crie a tabela disciplina (código, nome, cargaho) e relacione com a tabela aluno
--e insira os dados na tabela disciplina e no campo da tabela aluno e elabore uma
--procedure em PL/SQL que apresente os seguintes valores:

--a) Para a disciplina Matemática mensalidade mais 10%
--b) Para Banco de dados mensalidade menos 20 %
--c) Para Programação mensalidade mais 15%

create procedure sp_disciplina
@disci int
as

if @disci = 1 --matematica
begin
  select a.nome,d.nome,a.mensalidade*1.1 as 'Mensalidade + 10%' from aluno a
  inner join disciplina d
  on a.coddis = d.codigo
  where a.coddis = @disci
end
else if @disci = 2
begin
  select a.nome,d.nome,a.mensalidade*0.8 as 'Mensalidade - 20%' from aluno a
  inner join disciplina d
  on a.coddis = d.codigo
  where a.coddis = @disci
end
else if @disci = 3
begin
  select a.nome,d.nome,a.mensalidade*1.15 as 'Mensalidade + 15%' from aluno a
  inner join disciplina d
  on a.coddis = d.codigo
  where a.coddis = @disci
end

--drop procedure sp_disciplina
exec sp_disciplina 1


--5 Desenvolva uma procedure em PL/SQL que passe por parâmetro o código do
--aluno e se não encontrar mostrar a mensagem aluno não cadastrado, se
--encontrar mostrar o nome a media e a disciplina cursada. 

create procedure sp_alu
@codigo int
as
declare @media numeric(5,2)
declare @disci varchar(40)
declare @nome varchar(40)

set @media = (select (nota1+nota2)/2 from aluno 
  where codigo = @codigo)

set @media = (select nome from aluno 
  where codigo = @codigo)

set @disci = (select d.nome from aluno a
  inner join disciplina d
  on a.coddis = d.codigo
  where a.codigo = @codigo)

if @media > 0
begin
  select @nome
  select @disci
  select @media
end

--execução
exec sp_alu 2

------EXERCICIOS DE STORED PROCEDURE 310322-------


--1) Crie um stored procedure em PL/SQL que passe por parâmetro o código da
--disciplina e mostre a qtde de alunos e a soma das mensalidades.

create procedure sp_soma
@coddis int
as
declare @qtde int
declare @soma numeric(10,2)

set @qtde = (select count(*) from aluno where coddis = @coddis )

set @soma = (select sum(mensalidade) from aluno where coddis = @coddis )

select 'A qtde de alunos é = '+ convert (char(5),@qtde)
select 'A soma das mensalidades da disciplina é '+ convert(char(10),@soma)

exec sp_soma 2

--2) Elabore uma procedure em PL/SQL que passe por parâmetro um código de
--aluno e verifique se está aprovado, recuperação ou reprovado, também está
--reprovado de a qtde de faltas for maior 3.

create procedure sp_sitAluno
@codalu int
as
declare @media numeric(5,2)
declare @qtdeFalta int

set @media = (select (nota1 + nota2)/2 from aluno where codigo = @codalu)
set @media = (select qtdeFalta from aluno where codigo = @codalu)

if @qtdeFalta > 3
begin
	select 'Reprovado por fatas'
end
else
begin
	if @media >= 7
	begin
	 select 'Aprovado'
end
	else if @media < 4
begin
	select 'Reprovado'
end
else
	begin
	 select 'Recuperação'
	end
end

--execução
exec sp_sitAluno 1

--3) Desenvolva uma procedure em PL/SQL que passe por parâmetro um código
--de aluno e atualize a mensalidade em 20% caso esteja reprovado, 10% para
--recuperação e um desconto de 30% se aprovado.

create procedure sp_atuMensalidade
@codalu int
as
declare @media numeric(5,2)

set @media = (select (nota1 + nota2)/2 from aluno where codigo = @codalu)

	if @media >= 7
begin
	 update aluno set mensalidade = mensalidade * 1.2
	 where codigo = @codalu
end
	else if @media < 4
begin
	 update aluno set mensalidade = mensalidade * 0.7
	 where codigo = @codalu
end
else
begin
	  update aluno set mensalidade = mensalidade * 1.1
	 where codigo = @codalu
end


exec sp_atuMensalidade 1
select * from aluno 

--4) Faça uma procedure em PL/SQL que receba por parâmetro um código de
--aluno e atualize a mensalidade em percentual, conforme a quantidade de faltas,
--ou seja, se 4 faltas aumentar em 4% a mensalidade do aluno.

create procedure sp_atuMensa
@codalu int
as
declare @qtdeFaltas int

set @qtdeFaltas = (select qtdeFaltas from aluno where codigo = @codalu)
update aluno set mensalidade = mensalidade + (mensalidade*@qtdeFaltas)/100
where codigo = @codalu

exec sp_atuMensa 3
select * from aluno

--5) Elabore uma procedure em PL/SQL que verifique se o aluno tem mensalidade
--maior que 500 se sim adicione um novo campo email varchar(50) na tabela aluno
--e atualizar o email com as 3 primeiras letras do nome mais @unicesumar.edu.br
--a todos os alunos.

create table sp_email
@codalu int
as
declare @mensalidade numeric(10,2)

set @mensalidade = (select mensalidade from aluno where codigo = @codalu)

if @mensalidade > 500
begin
	alter table aluno add email varchar(50)
	update aluno set email = substring(nome,1,3) + '@unicesumar.edu.br'
	where codigo = @codalu
end

exec sp_email 5
select * from aluno
