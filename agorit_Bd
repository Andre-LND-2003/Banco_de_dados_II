create database Db_andre

CREATE TABLE [Aluno]
(Matricula Int NOT NULL Identity(1,1) --Contador automático
,NomeAluno Varchar(100) NOT NULL
,CPF CHAR(11) NOT NULL
,DataNcto SMALLDATETIME NOT NULL
,Mensalidade NUMERIC(6,2) NOT NULL
,Turma char(10) NOT NULL
)
--MANIPULAÇÃO DE DADOS

--Inserção de dados
INSERT ALUNO VALUES ('José da Silva','12345678900','19911121', 1000,'ADS3')
INSERT ALUNO VALUES ('Maria da Silva', '12345678911','20000317',1000, 'ADS1')
INSERT ALUNO VALUES ('Ana da Silva', '12345678922','20000317', 1000,'ADS3')
select * from Aluno

/* CRIAÇÃO DE VARIÁVEIS LOCAIS */
DECLARE @TOTAL INT --NÚMERO DE ALUNOS
DECLARE @VALOR NUMERIC(6,2) --VALOR TOTAL MENSALIDADE
DECLARE @VALOR_TURMA NUMERIC(6,2) --VALOR TOTAL MENSALIDADE POR TURMA
DECLARE @TURMA CHAR(5)
DECLARE @msg varchar(100)

/* DEFINE O VALOR DE CADA VARIÁVEL */
SET @TURMA = 'ADS3'
SET @TOTAL = (SELECT COUNT(*) FROM Aluno)
SET @VALOR = (SELECT SUM(MENSALIDADE) FROM Aluno)
SET @VALOR_TURMA = (SELECT SUM(MENSALIDADE) FROM Aluno WHERE TURMA=@TURMA)

/* IMPRIMINDO O VALOR DAS VARIÁVEIS */
PRINT(@TOTAL)
PRINT('TOTAL de Alunos ' + CONVERT(CHAR(10),@TOTAL))
PRINT('')
PRINT('MENSALIDADE TURMA ' + @TURMA)
PRINT('VALOR R$ ' + CONVERT(CHAR(10),@VALOR_TURMA))

/* VERIFICAÇÃO DO VALOR DA MENSALIDADE */
PRINT('')
PRINT('IF - DECISÃO')
IF @VALOR > 1000
BEGIN
SET @msg = 'Valor Total das Mensalidades maior que 1000' –Mostrar o valor
PRINT(@msg)
END
ELSE
BEGIN
SET @msg = 'Valor Total das Mensalidades menor que 1000' –Mostrar o valor
PRINT(@msg)
END
PRINT('')
PRINT('WHILE - REPETIÇÃO')
WHILE @VALOR > 1000
BEGIN
PRINT(@VALOR) ---Descrever/mostrar melhor
SET @VALOR=@VALOR-500
---Descrever/mostrar melhor depois de atualizado p valor
END

--1) Desenvolva um script em SQL que mostre um contador até 100 e pare no número 62
--mostrando o número como resultado;

declare @contador as int
set @contador = 1
while @contador <= 100
begin
select @contador
if @contador <= 61
begin 
set @contador = @contador + 1
continue
end
break
end

--2) Crie um script em P/SQL que mostre os número de 1 até 100 e mostre se o número é
--par ou impar.

declare @principal as int
set @principal = 1
while @principal <= 100
begin
select @principal,
case 
when @principal % 2 = 0 then 'par'
else 'impar'
end 
set @principal = @principal + 1
end

--3)Desenvolve um script em PL/SQL que apresente o resultado da variável idade se:

--  Condição      |   Resultado
--                |
--  Menor que 10  |   Criança
--  De 10 até 17  |   Jovem
--  De 18 até 60  |   Adulto
--  Acima de  61  |   Idoso

declare @idade as int
set @idade = 40
select @idade,
case
when @idade < 10 then 'Criança'
when @idade >= 10 and @idade <= 17 then 'Jovem'
when @idade >= 18 and @idade <= 60 then 'Adulto'
else 'Idoso'
end as resultado

--4) Mostrar se o aluno mario da silva está cadastrado na tabela e calcular aumento na
--mensalidade de 10% e apresentar como jovem se idade menor que 60 senão idoso

declare @idade as int
declare @nome as varchar (100)
declare @mensa numeric (12,2)
set @nome = 'Mario da Silva'
set @mensa = (select mensalidade from Aluno	where nome=@nome)
set @idade = (select year (getdate()) - year (DataNcto) from Aluno where nome = @nome
set @mensa * 1.1 --recebe aumento de 10%
select @mensa --mostra valor da mensalidade
if @idade < 60
begin
print 'Jovem'
end
begin
select 'Idoso'
end

--5) Elabore um script em SQL que apresente um contador até 1000 e mostre a soma dos
--números multiplicados por 3 e multiplicados por 5 e no final mostrar a soma de cada um deles; 

declare @contador as int
set @contador = 1
while @contador =< 1000
begin
select @contador 




--6) Mostrar em PL/SQL se o aluno Mário da silva está contido em uma variável, bem como seu
--salário e calcular aumento de 10% para ele e mostre o nome em letras maiúsculas.



--7) Elabore um laço de repetição usando PL/SQL que use While e quando o valor for 8 pare e
--finalize o programa;

declare @valor as int
set @valor = 1
while @valor <= 10
begin
select @valor
if @valor <= 7
begin 
set @valor = @valor + 1
continue
end
break
end

--8) Desenvolva um script em PL/SQL que use duas variáveis e verifique se a media for acima de
--6 o aluno está aprovado senão reprovado;

declare @nota1 numeric (12,2)
declare @nota2 numeric (12,2)
set @nota1 = 5
set @nota2 = 5
select @nota1 + @nota2
case
when @nota1 + @nota2 >= 12 then 'aprovado'
else 'reprovado'
end


--9) Elabore um script em PL/SQL que verifique os números de 1 até 100 e mostre a quantidade
--de pares e impares no final, bem como a soma de todos os pares e também a soma dos
--impares.



--10) Crie um script em PL/SQL usando CASE que mostre um laço de repetição de 1 até 5000 e
--apresente a seguinte mensagem:
--Se número entre 1000 e 2000 analista júnior
--Se número entre 2500 e 4000 analista pleno
--Senão analista sênior
